////////////////////////////////////////////////////////////
//
// AStar for occupancy grid
//
////////////////////////////////////////////////////////////
#ifndef NODE_H
#define NODE_H

#include <algorithm>

enum statusTypes {UNKNOWN,OPEN,CLOSED,TERRAIN};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct point
{
	double x,y;
	void unit() { double mag = sqrt(x*x+y*y); x/=mag; y/=mag; }
};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class node
{
	public:
		node() : parent(std::make_pair(-1,-1)), x(0), y(0), status(UNKNOWN), f(0), g(0), h(0) {}
		
		node(unsigned x_, unsigned y_) :  parent(std::make_pair(-1,-1)), x(x_), y(y_), status(UNKNOWN), f(0), g(0), h(0) {}
		
		void cost(double g_, double h_) { g = g_; h = h_; f = g+h;}
		void reset() 
		{ 
			parent = std::make_pair(-1,-1);
			g = f = h = 0; 
			status = UNKNOWN;
		}

		std::pair<int, int> parent;
		int x,y;
		statusTypes status;	
		double f,g,h;
		bool start = false;
		bool end = false;
		//static std::vector< std::vector<node> > *map;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct CompareNodes
{
	public:
		bool operator() (const node &lhs, const node &rhs)
		{
			return (lhs.f > rhs.f);
		}
};

#endif