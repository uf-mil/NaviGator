
<!--
        This file launches all nodes necessary for navigation.
        Nodes launched:
            * thruster mapper
            * pose_controller
            * wrench_arbiter
            * joystick_wrench
            * joy_node
            * alarm_handler
            * tf
              - ins_tf
              - lidar_tf
              - forward_camera_tf
              - right_camera_tf
              - down_camera_tf
              - shooter_tf

        It takes in twp parameters
        * 'sim' to launch only certain nodes.
        * 'rc' to decide whether to launch the xbox remote control nodes

        Nodes affected by the 'rc' arg:
            * joystick_wrench
            * joy_node

-->

<launch>

    <arg name="sim" default="true" />
    <arg name="rc" default="true" />

    <node pkg="navigator_thrust_mapper" type="thrust_mapper.py" name="thrust_mapper">
    <!-- Parameters used to set the thruster locations and angles relative to the center of gravity of the boat -->
        <rosparam param="thruster_BL_cog">[-1.9304, 1.016]</rosparam>
        <rosparam param="thruster_BR_cog">[-1.9304, -1.016]</rosparam>
        <rosparam param="thruster_FL_cog">[1.5748, 0.6096]</rosparam>
        <rosparam param="thruster_FR_cog">[1.5748, -0.6096]</rosparam>
        <rosparam param="thruster_BL_theta">0.785398</rosparam> <!-- +/- 45 degrees -->
        <rosparam param="thruster_BR_theta">-0.785398</rosparam>
        <rosparam param="thruster_FL_theta">-0.785398</rosparam>
        <rosparam param="thruster_FR_theta">0.785398</rosparam>
        <rosparam param="effort_ratio">1.35</rosparam><!-- map 220 newtons to 300 effort units -->
        <rosparam param="effort_limit">400</rosparam>
    </node>
    
    <node pkg="sub8_alarm" type="alarm_handler.py" name="alarm_handler"/>
    
    <node name="wrench_arbiter" pkg="navigator_msg_multiplexer" type="wrench_arbiter.py"/>

    <node name="pose_controller" pkg="navigator_controller" type="mrac_controller.py"/>
    <!-- can be type="mrac_controller.py" OR type="run_nn_controller" if you have that dependency
    <https://github.com/jnez71/neural_control>-->

    <node if="$(arg rc)" pkg="navigator_joystick_control" type="navigator_joystick.py" name="joystick_wrench" output="screen">
        <param name="force_scale" value="600" type="double"/>
        <param name="torque_scale" value="500" type="double"/>
    </node>

    <node if="$(arg rc)" respawn="true" pkg="xbox_joy_node" type="joy_node" name="joy_node">
        <param name="dev" type="string" value="/dev/input/by-id/usb-045e_0291-joystick" />
        <param name="deadzone" value="0.12" />
        <param name="autorepeat_rate" value="5"/>
    </node>


    <node name="move_helper" pkg="navigator_tools" type="move_helper.py"/>

    <node pkg="kill_handling" type="kill_master" name="kill_master"/>
    <node pkg="c3_trajectory_generator" type="c3_trajectory_generator" name="c3_trajectory_generator" output="screen">
        <rosparam>
            <!-- Degraded trajectory -->
            fixed_frame: /enu
            body_frame: /base_link
            vmin_b: [-0.68, -0.45, -1, -1, -1, -0.19]
            vmax_b: [  1.1,  0.45,  1,  1,  1,  0.19]
            amin_b: [-0.34, -0.15, -1, -1, -1, -0.04]
            amax_b: [ 0.53,  0.15,  1,  1,  1,  0.04]
            arevoffset_b: [0.0, 0, 0]
            umax_b: [1, 1, 1, 1, 1, 1]
          </rosparam>
    </node>

</launch>
